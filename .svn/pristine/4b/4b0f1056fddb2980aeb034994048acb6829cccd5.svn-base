/*
 * File: app/view/direccionar/DirecGeneralViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tramites.view.direccionar.DirecGeneralViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.direccionar.direcgeneral',

    onButtonClick1: function(button, e, eOpts) {
        STRTRAMITEDETA.load();
    },

    onChRecibidoChange: function(field, newValue, oldValue, eOpts) {
        if(oldValue === true){
            newValue = true;
            field.setDisabled(true);
        }
    },

    onRecibidoCheckBeforeCheckChange: function(checkcolumn, rowIndex, checked, record, e, eOpts) {
        if(record.data.TRA_RECIBIDO !== true){
            if(record.data.TRA_FECHARECIBIDO===''){
                Ext.Msg.show({
                    title: 'Aviso',
                    msg: 'Va a recepcionar el trámite y después ya no puede modificarlo. ¿Está seguro?',
                    icon: Ext.Msg.QUESTION,
                    buttonText: {
                        yes: 'Aceptar',
                        no: 'Cancelar'
                    },
                    buttons: Ext.Msg.YESNO,
                    fn: function (btn) {
                        if (btn == 'yes') {
                            //Nuevafecha
                            var fecha = Ext.Date.format(new Date(), "Y-m-d");
                            //record.data.TRA_FECHARECIBIDO = fecha;

                            var store = Ext.getCmp('grdTramite2').getStore();
                            store.add(record);
                            store.sync(
                            {
                                params: {
                                    idParametro: record.data.TRA_PRM_ID,//Se envia el codigo del parametro
                                    fechaRecibido: fecha
                                },
                                success: function(batch, success)
                                {
                                    store.commitChanges();
                                    store.load();

                                },

                                failure: function(batch, success)
                                {
                                    Ext.Msg.alert('Error', 'Hubor un error');
                                }
                            });

                        }
                        else{
                            var strTramiteDet = Ext.getStore('Registro');
                            strTramiteDet.proxy.extraParams = {
                                busqueda: 2,
                                parametro: PARAMETROPRINCIPAL
                            };
                            strTramiteDet.load();
                            Ext.getCmp('pnlDestinosDireccionar').setVisible(false);
                        }
                    }
                });

            }
            Ext.getCmp('pnlDestinosDireccionar').setVisible(true);
        }
        else{
            Ext.Msg.alert('Aviso', 'Este trámite ya fue recibido.');
            this.onButtonClick1();

        }
    },

    onGrdTramite2CellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        if (record)
        {
            var winTramiteD = Ext.create('Tramites.view.direccionar.winTramiteDetalle');
            winTramiteD.curRec = record;
            winTramiteD.store = Ext.getStore('Registro');
            Ext.getStore('Registro').load();
            winTramiteD.show();
        }
        else
        {
            Ext.Msg.alert('Error', 'Seleccione un registro para editar');
        }
    },

    onGrdTramite2Render: function(component, eOpts) {

    },

    onGrdTramite2ItemClick: function(dataview, record, item, index, e, eOpts) {
        var grid = Ext.getCmp('grdTramite2');
        var arrayKeys = grid.getSelectionModel().selected.items;
        if(arrayKeys.length === 0){
            Ext.Msg.alert('Error', 'Debe escoger un registro');
        }
        else{
            if(record.data.TRA_RECIBIDO === true)
            {
                //-hace visible el panel de destinos si el campo seleccionado esta recibido
                Ext.getCmp('pnlDestinosDireccionar').setVisible(true);
                //-------
                //-verifica si el usuario es un jefe de la unidad seleccionada para mostrar el boton de anular.

                Ext.Ajax.request
                (
                {
                    method: 'post',
                    url: '../servidor/tramites/usuario/verificaJefe',
                    params:{
                        usuario: USUARIO
                    },
                    success: function (response, options) {
                        var responseData = Ext.JSON.decode(response.responseText);
                        if (!responseData.success) {
                            Ext.Msg.show//Mensaje de Error
                            (
                            {
                                title: 'Error',
                                msg: responseData.message,
                                icon: Ext.Msg.ERROR,
                                buttons: Ext.Msg.OK
                            }
                            );
                            me.onButtonClickRefresh();
                        }
                        else {
                            grid.getStore().removeAt(indice);

                            var strRegistro = Ext.getStore('Registro');
                            strRegistro.load();
                            Ext.Msg.alert('Correcto', 'Tramite(s) anulado(s)');
                        }
                    },
                    failure: function (response, options){
                        Ext.Msg.show//Mensaje de Error
                        (
                        {
                            title: 'Error',
                            msg: responseData.message,
                            icon: Ext.Msg.ERROR,
                            buttons: Ext.Msg.OK
                        }
                        );
                        this.onButtonClickRefresh();
                    }
                }
                );
                //------
                //-carga el combo de destinos
                var strDestinos = Ext.getStore('Unidad');
                var parametro = record.data.TRA_PRM_ID;
                strDestinos.proxy.extraParams = {
                    destino: 1,
                    idparametro: parametro
                };
                strDestinos.load();
                //------
                //-crud de estados
                var strEstado = Ext.getStore('Estado');
                var tramite = record.data.TRA_CODIGO;

                var fechainicio = record.data.TRA_FECHARECIBIDO;
                strEstado.proxy.extraParams = {
                    idparametro: parametro,
                    idtramite: tramite,
                    fechaInicio: fechainicio
                };
                strEstado.load();
                //------
            }
            else
            Ext.getCmp('pnlDestinosDireccionar').setVisible(false);
        }

    },

    onButtonClick2: function(button, e, eOpts) {
        /*var store = Ext.getCmp('grdDirecTramite').getStore();
        var rec = Ext.create('model.estadomodel');
        rec.data.EST_FECHAINICIO = new Date();

        var forma = Ext.getCmp('formDireccionar').getForm();
        var reco    = forma.getRecord();

        var tramiteNum = reco.data.TRA_CODIGO;
        var parametroNum = reco.data.TRA_PRM_ID;
        var fechainicio = reco.data.TRA_FECHARECIBIDO;
        //var strEstado = Ext.getStore('Estado');
        store.proxy.extraParams = {
            tramite: tramiteNum,
            parametro: parametroNum,
            fecha: fechainicio
        };


        store.add(rec);
        store.commitChanges();
        store.load();*/
        var grid = Ext.getCmp('grdDirecTramite');
        var store = grid.getStore();
        var g = Ext.getCmp('grdTramite2');
        var rec = g.selection;
        var tramiteNum = rec.data.TRA_CODIGO;
        var parametroNum = rec.data.TRA_PRM_ID;
        var fechainicio = rec.data.TRA_FECHARECIBIDO;
        store.insert(0,
        {
            EST_CODIGO: 0,
            TRA_PRM_ID:parametroNum,
            EST_FECHARECIBIDO:new Date(),
            EST_FECHAINICIO: fechainicio,
            TRA_CODIGO:tramiteNum,
            UND_CODIGO:0
        });
    },

    onBtnDirecRefreshClick: function(button, e, eOpts) {
        var grid = Ext.getCmp('grdDirecTramite');
        var store = grid.getStore();
        var g = Ext.getCmp('grdTramite2');
        var rec = g.selection;
        var tramiteNum = rec.data.TRA_CODIGO;
        var parametroNum = rec.data.TRA_PRM_ID;
        var strEstado = Ext.getStore('Estado');
        strEstado.load();
        strEstado.proxy.extraParams = {
            idtramite: tramiteNum,
            idparametro: parametroNum
        };
        Ext.getCmp('grdDirecTramite').getStore().load();
    },

    onGrdDirecTramiteRender: function(component, eOpts) {
        /* var strTramiteDet = Ext.getStore('Estado');
        var tramiteid =
        strTramiteDet.proxy.extraParams = {
        busqueda: 2
        };
        strTramiteDet.load();*/
    }

});
