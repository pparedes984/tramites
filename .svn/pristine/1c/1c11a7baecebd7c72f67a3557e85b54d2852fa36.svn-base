/*
 * File: app/view/direccionar/DirecGeneralViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tramites.view.direccionar.DirecGeneralViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.direccionar.direcgeneral',

    onButtonClick1: function(button, e, eOpts) {
        //permite volver a cargar la información que este en el grid de tramites dependiendo de la pantalla en la que este
        STRTRAMITEDETA.load();
        Ext.getCmp('pnlDestinosDireccionar').setHidden(true);
    },

    onRecibidoCheckBeforeCheckChange: function(checkcolumn, rowIndex, checked, record, e, eOpts) {
        //controla que al cambiar el check de recibido no se pueda quitar despues y se muestre
        //el grid de destinos correspondiente a ese tramite si esta recibido o no
        var me = this;
        Ext.getCmp('grdTramite2').getView().select(rowIndex);
        if(record.data.TRA_RECIBIDO !== true){
            if(record.data.TRA_FECHARECIBIDO===null){
                Ext.Msg.show({
                    title: 'Aviso',
                    msg: 'Va a recepcionar el trámite y después ya no puede modificarlo. ¿Está seguro?',
                    icon: Ext.Msg.QUESTION,
                    buttonText: {
                        yes: 'Aceptar',
                        no: 'Cancelar'
                    },
                    buttons: Ext.Msg.YESNO,
                    fn: function (btn) {
                        if (btn == 'yes') {
                            //Nuevafecha
                            var fecha = Ext.Date.format(new Date(), "Y-m-d");

                            var store = Ext.getCmp('grdTramite2').getStore();
                            store.add(record);
                            store.sync(
                            {
                                params: {
                                    idParametro: record.data.TRA_PRM_ID,//Se envia el codigo del parametro
                                    fechaRecibido: fecha
                                },
                                success: function(batch, success)
                                {
                                    store.commitChanges();
                                    store.load();
                                    //Aqui se crea el registro de Estado para el tramite recibido
                                    var store2 = Ext.getStore('Estado');
                                    var g = Ext.getCmp('grdTramite2');
                                    var rec = g.selection;
                                    var tramiteNum = rec.data.TRA_CODIGO;
                                    var parametroNum = rec.data.TRA_PRM_ID;
                                    var fechainicio = rec.data.TRA_FECHARECIBIDO;

                                    var reco = Ext.create('model.estadomodel');
                                    reco.data.EST_CODIGO = 0;
                                    reco.data.TRA_PRM_ID = parametroNum;
                                    reco.data.EST_FECHARECIBIDO = new Date();
                                    reco.data.EST_FECHAINICIO = fechainicio;
                                    reco.data.TRA_CODIGO = tramiteNum;
                                    reco.data.UND_CODIGO = 183;
                                    reco.data.TIP_CODIGO = 1;
                                    reco.data.EST_DESCRIPCION = 'El trámite fue recibido';
                                    reco.data.EST_OBSERVACION = 'El trámite fue recibido';

                                    store2.add(reco);
                                    store2.sync(
                                    {
                                        params:{
                                            tipoEstado: 1,
                                            idtramite: reco.data.TRA_CODIGO,
                                            estcodigo: 0,
                                            origenest: 0,
                                            idparametro: reco.data.TRA_PRM_ID
                                        },
                                        success: function(batch, success)
                                        {
                                            store2.commitChanges();
                                            store2.load();
                                            me.onBtnDirecRefreshClick();

                                        },

                                        failure: function(batch, success)
                                        {
                                            Ext.Msg.alert('Error', 'Hubor un error');
                                        }
                                    });//FIN ESTADO tramite recibido
                                },

                                failure: function(batch, success)
                                {
                                    Ext.Msg.alert('Error', 'Hubor un error');
                                }
                            });
                        }
                        else{
                            var strTramiteDet = Ext.getStore('Registro');
                            strTramiteDet.proxy.extraParams = {
                                busqueda: 2,
                                parametro: PARAMETROPRINCIPAL
                            };
                            strTramiteDet.load();
                            Ext.getCmp('pnlDestinosDireccionar').setVisible(false);
                        }
                    }
                });

            }
            Ext.getCmp('pnlDestinosDireccionar').setVisible(true);
        }
        else{
            Ext.Msg.alert('Aviso', 'Este trámite ya fue recibido.');
            this.onButtonClick1();
        }
    },

    onGrdTramite2CellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        if (record)
        {
            //crea, y muestra la vemtana para ver el detalle del registro seleccionado
            var winTramiteD = Ext.create('Tramites.view.direccionar.winTramiteDetalle');
            winTramiteD.curRec = record;
            winTramiteD.store = Ext.getStore('Registro');
            Ext.getStore('Registro').load();
            winTramiteD.show();
        }
        else
        {
            Ext.Msg.alert('Error', 'Seleccione un registro para editar');
        }
    },

    onGrdTramite2Select: function(rowmodel, record, index, eOpts) {
        if (BANDERA ===0){
            var me = this;
            var grid = Ext.getCmp('grdTramite2');
            var arrayKeys = grid.getSelectionModel().selected.items;

            if(record.data.TRA_RECIBIDO === true)
            {
                //-hace visible el panel de destinos si el campo seleccionado esta recibido
                Ext.getCmp('pnlDestinosDireccionar').setVisible(true);
                //-------
                //-verifica si el usuario es un jefe de la unidad seleccionada para mostrar el boton de anular.
                Ext.Ajax.request
                (
                {
                    method: 'post',
                    url: '../servidor/tramites/estadotramite/verificaJefe',
                    params:{
                        usuario: USUARIO,
                        unidad: UNIDADDIR
                    },
                    success: function (response, options) {
                        var responseData = Ext.JSON.decode(response.responseText);
                        if (!responseData.success) {
                            Ext.getCmp('txtAsignadoA').setHidden(false);
                            Ext.getCmp('txtAsignadoADestino').setDisabled(true);
                        }
                        else{
                            Ext.getCmp('txtAsignadoA').setHidden(false);
                            Ext.getCmp('txtAsignadoADestino').setDisabled(false);
                        }
                    },
                    failure: function (response, options){
                        Ext.Msg.show//Mensaje de Error
                        (
                        {
                            title: 'Error',
                            msg: responseData.message,
                            icon: Ext.Msg.ERROR,
                            buttons: Ext.Msg.OK
                        }
                        );
                        Ext.getCmp('txtAsignadoA').setHidden(true);
                        Ext.getCmp('txtAsignadoADestino').setDisabled(true);
                    }
                }
                );
                //------
                //-carga el combo de destinos
                var strDestinos = Ext.getCmp('cbDestinosGrid').getStore();
                var parametro = record.data.TRA_PRM_ID;
                strDestinos.proxy.extraParams = {
                    unidireccion: 1,
                    destino: 0,
                    idparametro: parametro,
                    idtramite: record.data.TRA_CODIGO
                };
                strDestinos.load();
                //------
                //-muestra
                Ext.getCmp('grdDirecTramite').getStore().removeAll();
                var strEstado = Ext.getCmp('grdDirecTramite').getStore();
                var tramite = record.data.TRA_CODIGO;

                var fechainicio = record.data.TRA_FECHARECIBIDO;
                var busc;
                if(UNIDADDIR !== '183')
                busc = 2;//obtiene un unico registro de destino que corresponde a una unidad de direccionamiento paraque pueda tramitar su parte respecto a ese tramite, si esta finalizado ya no se muestra
                else
                busc = 1;//obtiene todos los destinos de un tramite para la pantalla de direccionamiento
                strEstado.proxy.extraParams = {
                    idparametro: parametro,
                    idtramite: tramite,
                    fechaInicio: fechainicio,
                    busqueda: busc,
                    unidad: UNIDADDIR
                };
                strEstado.load();
                //------
            }
            else
            Ext.getCmp('pnlDestinosDireccionar').setVisible(false);
        }
        else
        Ext.Msg.alert('Alerta', 'Se ecuentra en medio del direccionamiento');
    },

    onBtnAgregarDestinoClick: function(button, e, eOpts) {
        //cada vez que se expanda el combobox de destinos, se van a cargar los destinos que ese tramite
        //no tenga en proceso y ya esten finalizados
        var strDestinos = Ext.getCmp('cbDestinosGrid').getStore();
        var grid = Ext.getCmp('grdTramite2');
        var record = grid.selection;
        var parametro = record.data.TRA_PRM_ID;
        strDestinos.proxy.extraParams = {
            //destino: 2,
            unidireccion: 1,
            destino:0,
            idparametro: parametro,
            idtramite: record.data.TRA_CODIGO
        };
        strDestinos.load();

        var grid = Ext.getCmp('grdDirecTramite');
        var store = grid.getStore();
        var g = Ext.getCmp('grdTramite2');
        var rec = g.selection;
        var tramiteNum = rec.data.TRA_CODIGO;
        var parametroNum = rec.data.TRA_PRM_ID;
        var fechainicio = rec.data.TRA_FECHARECIBIDO;
        //genera la primera linea que se inserta para agregar un destino
        store.insert(0,
        {
            EST_CODIGO: 0,
            TRA_PRM_ID:parametroNum,
            EST_FECHARECIBIDO:new Date(),
            EST_FECHAINICIO: fechainicio,
            TRA_CODIGO:tramiteNum,
            UND_CODIGO:0,
            TIP_CODIGO:1
        });
    },

    onBtnDirecRefreshClick: function(button, e, eOpts) {
        var grid = Ext.getCmp('grdDirecTramite');
        var store = grid.getStore();
        store.removeAll();
        var g = Ext.getCmp('grdTramite2');
        var rec = g.selection;
        var parametro = rec.data.TRA_PRM_ID;
        var tramite = rec.data.TRA_CODIGO;
        var fechainicio = rec.data.TRA_FECHARECIBIDO;
        var busc;
        if(UNIDADDIR !== '183')
        busc = 2;//obtiene un unico registro de destino que corresponde a una unidad de direccionamiento paraque pueda tramitar su parte respecto a ese tramite, si esta finalizado ya no se muestra
        else
        busc = 1;//obtiene todos los destinos de un tramite para la pantalla de direccionamiento
        var strEstado = store;
        //carga la grid de destinos depdendiendo de la pantalla en la que esta
        strEstado.proxy.extraParams = {
            idparametro: parametro,
            idtramite: tramite,
            fechaInicio: fechainicio,
            busqueda: busc,
            unidad: UNIDADDIR
        };
        strEstado.load();

    },

    onBtnVerDestinosClick: function(button, e, eOpts) {
        //crea, añade y muestra la ventana para ver todos los destinos de un tramite
        var winEstado = Ext.create('Tramites.view.direccionar.winEstado');
        winEstado.show();
        var grid = Ext.getCmp('grdDirecTramite').setVisible(false);
    },

    onTxtAsignadoADestinoExpand: function(field, eOpts) {
        var strUsuario = Ext.getCmp('txtAsignadoADestino').getStore();
        strUsuario.removeAll();
        strUsuario.proxy.extraParams = {
            usr: 2,
            unidad: UNIDADDIR
        };
        strUsuario.load();
    },

    onRowEditingEdit1: function(editor, context, eOpts) {
        //guarda los cambios si es que el registro fue nuevo o actualizado
        var me =this;
        if (context.record.modified)
        {
            var reco = context.record;
            if(context.record.data.TIP_CODIGO === 1){//Cuando el tipo no es finalizado
                var store = Ext.getCmp('grdDirecTramite').getStore();
                store.add(reco);

                store.sync(
                {
                    params:{
                        tipoEstado: reco.data.TIP_CODIGO,
                        tracodigo: reco.data.TRA_CODIGO,
                        estcodigo: reco.data.EST_CODIGO,
                        origenest:reco.data.EST_ORIGEN
                    },
                    success: function(batch, success)
                    {
                        BANDERA = 0;
                        store.commitChanges();
                        store.load();
                        Ext.getCmp('grdDirecTramite').getStore().load();
                    },

                    failure: function(batch, success)
                    {
                        Ext.Msg.alert('Error', 'Hubor un error al guardar los datos');
                    }
                });
            }

            else if(context.record.data.TIP_CODIGO === 2)//Cuando el tipo es devuelto1(2)
            {
                Ext.Msg.show({
                    title: 'Atención',
                    msg: 'Una vez devuelto el trámite ya no podrá editarlo, ¿desea devolverlo?',
                    icon: Ext.Msg.QUESTION,
                    iconCls:'',

                    buttonText: {
                        yes: 'Si',
                        no: 'No'
                    },
                    buttons: Ext.Msg.YESNO,
                    fn: function (btn) {
                        if (btn == 'yes') {
                            Ext.Msg.alert('Alerta', 'El trámite ha sido devuelto satisfactoriamente.');
                            var store = Ext.getCmp('grdDirecTramite').getStore();
                            store.add(reco);

                            store.sync(
                            {
                                params:{
                                    tipoEstado: reco.data.TIP_CODIGO,
                                    tracodigo: reco.data.TRA_CODIGO,
                                    estcodigo: reco.data.EST_CODIGO,
                                    origenest:reco.data.EST_ORIGEN
                                },
                                success: function(batch, success)
                                {
                                    //store.commitChanges();
                                },

                                failure: function(batch, success)
                                {
                                    Ext.Msg.alert('Error', 'Hubor un error al guardar los datos');
                                }
                            });

                            //Aqui se crea el registro de Estado para el tramite DEVUELTO1
                            store.removeAll();
                            store2 = Ext.getStore('Estado');
                            var reg = Ext.create('model.estadomodel');
                            reg.data.EST_CODIGO = 0;
                            reg.data.TRA_PRM_ID = reco.data.TRA_PRM_ID;
                            reg.data.EST_FECHARECIBIDO = new Date();
                            reg.data.EST_FECHAINICIO = reco.data.EST_FECHAINICIO;
                            reg.data.TRA_CODIGO = reco.data.TRA_CODIGO;
                            reg.data.UND_CODIGO = reco.data.UND_CODIGO;
                            reg.data.TIP_CODIGO = 1;
                            reg.data.EST_FECHAFIN = new Date();


                            store2.add(reg);
                            store2.sync(
                            {
                                params:{
                                    tipoEstado: 1,
                                    tracodigo: reco.data.TRA_CODIGO,
                                    estcodigo: 0,
                                    origenest: 0
                                },
                                success: function(batch, success)
                                {
                                    store2.commitChanges();
                                    store2.load();
                                },

                                failure: function(batch, success)
                                {
                                    Ext.Msg.alert('Error', 'Hubor un error');
                                }
                            });//FIN ESTADO tramite Devuelto1*/
                        }
                        else
                        me.onBtnDirecRefreshClick();
                    }
                });
            }
            else if(context.record.data.TIP_CODIGO === 3){//Cuando el código es devuelto2
                Ext.Msg.show({
                    title: 'Alerta',
                    msg: 'Una vez devuelto, el trámite no puede ser editado, desea devolverlo?',
                    iconCls:'x-fa fa-info',
                    buttonText: {
                        yes: 'Si',
                        no: 'No'
                    },
                    buttons: Ext.Msg.YESNO,
                    fn: function (btn) {
                        if (btn == 'yes') {
                            var store = Ext.getCmp('grdDirecTramite').getStore();
                            var rec = Ext.create('model.estadomodel');
                            if(reco.data.TIP_CODIGO === 3){//permite generar un nuevo destino solo si es que la unidad finalizó su parte
                                Ext.Msg.show({
                                    title: 'Atención',
                                    msg: 'Una vez devuelto puede agregar un destino más, desea agregarlo?',
                                    icon: Ext.Msg.QUESTION,
                                    iconCls:'',

                                    buttonText: {
                                        yes: 'Si',
                                        no: 'No'
                                    },
                                    buttons: Ext.Msg.YESNO,
                                    fn: function (btn) {
                                        if (btn == 'yes') {
                                            BANDERA = 1;
                                            var grid = Ext.getCmp('grdDirecTramite');
                                            var store = grid.getStore();
                                            var g = Ext.getCmp('grdTramite2');
                                            var rec = g.selection;
                                            var tramiteNum = rec.data.TRA_CODIGO;
                                            var parametroNum = rec.data.TRA_PRM_ID;
                                            var fechainicio = rec.data.TRA_FECHARECIBIDO;

                                            store.insert(0,
                                            {
                                                EST_CODIGO: 0,
                                                TRA_PRM_ID:parametroNum,
                                                EST_FECHARECIBIDO:new Date(),
                                                EST_FECHAINICIO: fechainicio,
                                                TRA_CODIGO:tramiteNum,
                                                UND_CODIGO: 0,
                                                TIP_CODIGO: 1,
                                                EST_ORIGEN: reco.data.EST_CODIGO,
                                                EST_FECHAFIN: new Date()
                                            });
                                            Ext.getCmp('cbEstado').setDisabled(true);
                                            Ext.getCmp('txtDestino').setHidden(false);
                                            Ext.getCmp('txtAsignadoADestino').setDisabled(true);
                                        }
                                    }
                                });
                            }
                            store.add(reco);

                            store.sync(
                            {
                                params:{
                                    tipoEstado: reco.data.TIP_CODIGO
                                },
                                success: function(batch, success)
                                {
                                    store.commitChanges();
                                    store.load();
                                    Ext.getCmp('grdDirecTramite').getStore().load();
                                },

                                failure: function(batch, success)
                                {
                                    Ext.Msg.alert('Error', 'Hubor un error');
                                    me.onBtnDirecRefreshClick();
                                }
                            });
                        }
                        else
                        me.onBtnDirecRefreshClick();
                    }
                });//Fin del mensaje: Una vez devuelto2...
            }
            else if(context.record.data.TIP_CODIGO === 4){//Cuando el código es finalizado
                Ext.Msg.show({
                    title: 'Alerta',
                    msg: 'Una vez finalizado, el trámite no puede ser editado, desea finalizar?',
                    iconCls:'x-fa fa-info',
                    buttonText: {
                        yes: 'Si',
                        no: 'No'
                    },
                    buttons: Ext.Msg.YESNO,
                    fn: function (btn) {
                        if (btn == 'yes') {
                            var store = Ext.getCmp('grdDirecTramite').getStore();
                            var rec = Ext.create('model.estadomodel');
                            if(reco.data.TIP_CODIGO === 4){//permite generar un nuevo destino solo si es que la unidad finalizó su parte
                                Ext.Msg.show({
                                    title: 'Atención',
                                    msg: 'Una vez finalizado puede agregar un destino más, desea agregarlo?',
                                    icon: Ext.Msg.QUESTION,
                                    iconCls:'',

                                    buttonText: {
                                        yes: 'Si',
                                        no: 'No'
                                    },
                                    buttons: Ext.Msg.YESNO,
                                    fn: function (btn) {
                                        if (btn == 'yes') {
                                            BANDERA = 1;
                                            var grid = Ext.getCmp('grdDirecTramite');
                                            var store = grid.getStore();
                                            var g = Ext.getCmp('grdTramite2');
                                            var rec = g.selection;
                                            var tramiteNum = rec.data.TRA_CODIGO;
                                            var parametroNum = rec.data.TRA_PRM_ID;
                                            var fechainicio = rec.data.TRA_FECHARECIBIDO;
                                            store.insert(0,
                                            {
                                                EST_CODIGO: 0,
                                                TRA_PRM_ID:parametroNum,
                                                EST_FECHARECIBIDO:new Date(),
                                                EST_FECHAINICIO: fechainicio,
                                                TRA_CODIGO:tramiteNum,
                                                UND_CODIGO: 0,
                                                TIP_CODIGO: 1,
                                                EST_ORIGEN: reco.data.EST_CODIGO,
                                                EST_FECHAFIN: new Date()

                                            });
                                            Ext.getCmp('cbEstado').setDisabled(true);
                                            Ext.getCmp('txtDestino').setHidden(false);
                                            Ext.getCmp('txtAsignadoADestino').setDisabled(true);
                                        }
                                    }
                                });
                            }
                            store.add(reco);

                            store.sync(
                            {
                                params:{
                                    tipoEstado: reco.data.TIP_CODIGO
                                },
                                success: function(batch, success)
                                {
                                    store.commitChanges();
                                    store.load();
                                    Ext.getCmp('grdDirecTramite').getStore().load();
                                },

                                failure: function(batch, success)
                                {
                                    Ext.Msg.alert('Error', 'Hubor un error');
                                    me.onBtnDirecRefreshClick();
                                }
                            });
                        }
                        else
                        me.onBtnDirecRefreshClick();
                    }
                });//Fin del mensaje: Una vez finalizado...
            }
        }

    },

    onRowEditingCanceledit: function(editor, context, eOpts) {
        //si cancela, se refresca el grid
        this.onBtnDirecRefreshClick();
        BANDERA = 0;
    },

    onGrdDirecTramiteCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        if(record.data.TIP_CODIGO !== 1){
            Ext.getCmp('txtObservacionDestino').setDisabled(true);
        }
        else{
            Ext.getCmp('txtObservacionDestino').setDisabled(false);
        }
        //desabilita el destino si es uno nuevo o una actualizacion de un registro
        if(record.data.UND_CODIGO === 0){
            Ext.getCmp('cbDestinosGrid').setDisabled(false);
            Ext.getCmp('txtObservacionDestino').setDisabled(false);
        }
        else
        Ext.getCmp('cbDestinosGrid').setDisabled(true);

    }

});
