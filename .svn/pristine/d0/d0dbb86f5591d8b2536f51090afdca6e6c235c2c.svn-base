/*
 * File: app/view/winNuevoTramiteViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tramites.view.winNuevoTramiteViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.winnuevotramite',

    onSave: function(button, e, eOpts) {
        var me = this;
        var forma = Ext.getCmp('frmTramite').getForm(),
            store = Ext.StoreManager.lookup('Registro');

        if (forma.isValid()) {
            var rec    = forma.getRecord();
            var values = forma.getValues();
            rec.set(values);
            store.add(rec);

            store.sync(
            {
                params: {
                    idParametro: Ext.getCmp('cbParametroPrincipal').getValue()//Se envia el codigo del parametro
                },
                success: function(batch, options)
                {

                    store.commitChanges();
                    forma.loadRecord(rec);
                    store.load();
                    Ext.getCmp('grdTramite').getStore().load();
                    Ext.Msg.alert('Datos Guardados','Se han guardado los datos exitosamente');

                    me.onCancel();
                },
                failure: function(batch, options)
                {
                    responseObj = Ext.decode(batch.exceptions[0].getResponse().responseText);
                    Ext.Msg.alert('Error', 'Hubo un error. '+responseObj.message);
                    var strTramiteReg = Ext.getStore('Registro');
                    //Cargar grid con tramites
                    strTramiteReg.removeAll();
                    Ext.getCmp('grdTramite').store.removeAll();
                    strTramiteReg.proxy.extraParams = {
                        busqueda: 0//Parametro para elegir el tipo de busqueda
                    };
                    strTramiteReg.load();
                    me.onCancel();
                }
            }
            );
        }

        else
        {
            Ext.Msg.alert('Ingrese los datos correctamente');
        }
    },

    onCancel: function(button, e, eOpts) {
        Ext.getCmp('winNuevoTramite').close();
    },

    onCbAsunto2Expand: function(field, eOpts) {
        if(Ext.getCmp('cbParametro2').getValue()!==null){
            var txtparametro = Ext.getCmp('cbParametro2').getValue();
            var strAsunto = Ext.getStore('Asunto');
            strAsunto.proxy.extraParams = {
                parametro: txtparametro
            };
            strAsunto.load();
        }
    },

    onCbAsunto2Select: function(combo, record, eOpts) {
        //Campos opcionales y obligatorios
        var idAsunto = Ext.getCmp('cbAsunto2').getValue();
        Ext.Ajax.request({
            method: 'post',
            url: '../servidor/tramites/campo/getCampos',
            params: {
                asunto: idAsunto
            },
            success: function (response, options) {
                var responseData = Ext.JSON.decode(response.responseText);
                if (responseData.success) {
                    var campos = responseData.data;
                    var viaticos = campos.find(o => o.CMP_NOMBRE === 'TRA_FECHA_VIAJE_VIATICO');
                    var undgasto = campos.find(o => o.CMP_NOMBRE === 'TRA_GASTO');
                    var valor = campos.find(o => o.CMP_NOMBRE === 'TRA_VALOR');
                    var beneficiario = campos.find(o => o.CMP_NOMBRE === 'TRA_BENEFICIARIO1');

                    if(viaticos !== undefined){//Identifica si Viaticos son obligatorios
                        Ext.getCmp('pnlViaticos').setHidden(false);
                        Ext.getCmp('dtFechaViajeViatico').allowBlank = false;
                        Ext.getCmp('txtDestinoViatico').allowBlank = false;
                        Ext.getCmp('txtResponsableViatico').allowBlank = false;
                        Ext.getCmp('dtFechaViajeViatico').setFieldLabel('Fecha de Viaje*');
                        Ext.getCmp('txtDestinoViatico').setFieldLabel('Destino*');
                        Ext.getCmp('txtResponsableViatico').setFieldLabel('Nombre de Responsable*');
                    }
                    else{
                        Ext.getCmp('pnlViaticos').setHidden(true);
                        //Elimina los datos de viaticos si el asunto no requiere de viaticos
                        Ext.getCmp('dtFechaViajeViatico').setValue(null);
                        Ext.getCmp('txtDestinoViatico').setValue(null);
                        Ext.getCmp('txtResponsableViatico').setValue(null);
                        Ext.getCmp('txtPersonasAdicionales').setValue(null);
                        Ext.getCmp('txtObservacionesViaje').setValue(null);

                        Ext.getCmp('dtFechaViajeViatico').allowBlank = true;
                        Ext.getCmp('txtDestinoViatico').allowBlank = true;
                        Ext.getCmp('txtResponsableViatico').allowBlank = true;
                        Ext.getCmp('dtFechaViajeViatico').setFieldLabel('Fecha de Viaje');
                        Ext.getCmp('txtDestinoViatico').setFieldLabel('Destino');
                        Ext.getCmp('txtResponsableViatico').setFieldLabel('Nombre de Responsable');
                    }

                    if(undgasto !== undefined){//Identifica si Und de Gasto es obligatoria
                        Ext.getCmp('cbUnidadGasto2').allowBlank = false;
                        Ext.getCmp('cbUnidadGasto2').setFieldLabel('Unidad de Gasto*');

                    }
                    else{
                        Ext.getCmp('cbUnidadGasto2').allowBlank = true;
                        Ext.getCmp('cbUnidadGasto2').setFieldLabel('Unidad de Gasto');
                    }
                    if(valor !== undefined){//Identifica si Valor es obligatoria
                        Ext.getCmp('txtValor').allowBlank = false;
                        Ext.getCmp('txtValor').setFieldLabel('Valor*');

                    }
                    else{
                        Ext.getCmp('txtValor').allowBlank = true;
                        Ext.getCmp('txtValor').setFieldLabel('Valor');
                    }

                    if(beneficiario !== undefined){//Identifica si Beneficiario es obligatoria
                        Ext.getCmp('txtBeneficiario1').allowBlank = false;
                        Ext.getCmp('txtBeneficiario1').setFieldLabel('Beneficiario*');
                        Ext.getCmp('txtCedula1').allowBlank = false;
                        Ext.getCmp('txtCedula1').setFieldLabel('Cedula*');

                    }
                    else{
                        Ext.getCmp('txtBeneficiario1').allowBlank = true;
                        Ext.getCmp('txtBeneficiario1').setFieldLabel('Beneficiario');
                        Ext.getCmp('txtCedula1').allowBlank = false;
                        Ext.getCmp('txtCedula1').setFieldLabel('Cedula');
                    }

                }
            },

            failure: function (response, options) {

            }
        });

    },

    onCbUnidadGasto2Keyup: function(textfield, e, eOpts) {
        var txtUndGasto = Ext.getCmp('cbUnidadGasto2').getValue();
        console.log(e.isSpecialKey());
        if(txtUndGasto !== null && e.isSpecialKey() === false){
            var strUndGasto = Ext.getCmp('cbUnidadGasto2').getStore();
            strUndGasto.removeAll();
            Ext.Ajax.request({
                method: 'post',
                url: '../servidor/tramites/unidadgasto/buscarUnidad',
                params: {
                    textounidad: txtUndGasto
                },
                success: function (response, options) {
                    strUndGasto.load();
                    Ext.getCmp('cbUnidadGasto2').expand();
                }
            });
        }
    },

    onWinNuevoTramiteAfterRender: function(component, eOpts) {
        //Formulario
        var forma = Ext.getCmp('frmTramite').getForm();
        if(component.curRec){ //Actualizar tramite
            forma.loadRecord(component.curRec);
            Ext.getCmp('cbParametro2').setDisabled(true);

            //Cargar combobox Unidad
            var strUnidad = Ext.getStore('Unidad');
            strUnidad.proxy.extraParams = {
                usuario: USUARIO
            };
            strUnidad.load();
            if(Ext.getCmp('cbAsunto2').getValue() !== null)
            this.onCbAsunto2Select();
        }

        else//Nuevo tramite
        {
            var Una = Ext.getCmp('cbParametro2');
            Ext.getCmp('cbParametro2').setValue(ParamVal);
            var rec = Ext.create('model.registromodel');
            forma.reset();
            forma.loadRecord(rec);
            Ext.getCmp('txtTraCodigo').setValue(null);
            //Cargar combobox Unidad
            var strUnidad = Ext.getStore('Unidad');
            strUnidad.proxy.extraParams = {
                usuario: USUARIO
            };
            strUnidad.load();
            //Ext.getCmp('cbAsunto2').disable(true);//Deshabilita el combobobox de Asunto
            var ParamVal = Ext.getCmp('cbParametroPrincipal').getValue();
            Ext.getCmp('cbParametro2').setValue(ParamVal);
            Ext.getCmp('cbParametro2').disable(true);
        }
        Ext.getCmp('dtFecha').setValue(new Date());//Fecha tramite
    }

});
