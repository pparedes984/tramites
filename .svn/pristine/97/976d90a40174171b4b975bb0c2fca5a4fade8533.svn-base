/*
 * File: app/view/winNuevoTramiteViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tramites.view.winNuevoTramiteViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.winnuevotramite',

    onCbAsunto2Expand: function(field, eOpts) {
        if(Ext.getCmp('cbParametro2').getValue()!==null){
            var txtparametro = Ext.getCmp('cbParametro2').getValue();
            var strAsunto = Ext.getStore('Asunto');
            strAsunto.proxy.extraParams = {
                parametro: txtparametro
            };
            strAsunto.load();
        }
    },

    onCbAsunto2Select: function(combo, record, eOpts) {
        //Campos opcionales y obligatorios
        var idAsunto = Ext.getCmp('cbAsunto2').getValue();
        Ext.Ajax.request({
            method: 'post',
            url: '../servidor/tramites/campo/getCampos',
            params: {
                asunto: idAsunto
            },
            success: function (response, options) {
                var responseData = Ext.JSON.decode(response.responseText);
                //if (responseData.success) {
                var campos = responseData.data;
                var viaticos;
                var undgasto;
                var valor;
                var beneficiario;

                if(campos !== undefined){
                    viaticos = campos.find(o => o.CMP_NOMBRE === 'TRA_FECHA_VIAJE_VIATICO');
                    undgasto = campos.find(o => o.CMP_NOMBRE === 'TRA_GASTO');
                    valor = campos.find(o => o.CMP_NOMBRE === 'TRA_VALOR');
                    beneficiario = campos.find(o => o.CMP_NOMBRE === 'TRA_BENEFICIARIO1');
                }
                else{
                    viaticos = undefined;
                    undgasto = undefined;
                    valor = undefined;
                    beneficiario = undefined;
                }

                Ext.getCmp('cbUnidadSolicitante2').focus(true);
                Ext.getCmp('cbUnidadSolicitante2').focus(false);
                Ext.getCmp('txtPersonaAutoriza').focus(true);
                Ext.getCmp('txtPersonaAutoriza').focus(false);

                if(viaticos !== undefined){//Identifica si Viaticos son obligatorios
                    Ext.getCmp('pnlViaticos').setHidden(false);
                    Ext.getCmp('dtFechaViajeViatico').allowBlank = false;
                    Ext.getCmp('txtDestinoViatico').allowBlank = false;
                    Ext.getCmp('txtResponsableViatico').allowBlank = false;
                    Ext.getCmp('dtFechaViajeViatico').setFieldLabel('Fecha de Viaje*');
                    Ext.getCmp('txtDestinoViatico').setFieldLabel('Destino*');
                    Ext.getCmp('txtResponsableViatico').setFieldLabel('Nombre de Responsable*');
                    Ext.getCmp('dtFechaViajeViatico').focus(true);
                    Ext.getCmp('txtDestinoViatico').focus(true);
                    Ext.getCmp('txtResponsableViatico').focus(true);
                    Ext.getCmp('dtFechaViajeViatico').focus(false);
                    Ext.getCmp('txtDestinoViatico').focus(false);
                    Ext.getCmp('txtResponsableViatico').focus(false);
                }
                else{
                    Ext.getCmp('dtFechaViajeViatico').allowBlank = true;
                    Ext.getCmp('txtDestinoViatico').allowBlank = true;
                    Ext.getCmp('txtResponsableViatico').allowBlank = true;
                    Ext.getCmp('dtFechaViajeViatico').setFieldLabel('Fecha de Viaje');
                    Ext.getCmp('txtDestinoViatico').setFieldLabel('Destino');
                    Ext.getCmp('txtResponsableViatico').setFieldLabel('Nombre de Responsable');

                    //Elimina los datos de viaticos si el asunto no requiere de viaticos
                    Ext.getCmp('dtFechaViajeViatico').reset();
                    Ext.getCmp('txtDestinoViatico').reset();
                    Ext.getCmp('txtResponsableViatico').reset();
                    Ext.getCmp('txtPersonasAdicionales').reset();
                    Ext.getCmp('txtObservacionesViaje').reset();
                    Ext.getCmp('dtFechaViajeViatico').focus(true);
                    Ext.getCmp('txtDestinoViatico').focus(true);
                    Ext.getCmp('txtResponsableViatico').focus(true);
                    Ext.getCmp('dtFechaViajeViatico').focus(false);
                    Ext.getCmp('txtDestinoViatico').focus(false);
                    Ext.getCmp('txtResponsableViatico').focus(false);
                    Ext.getCmp('pnlViaticos').setHidden(true);
                    //btnguardar.setDisabled(false);
                }

                if(undgasto !== undefined){//Identifica si Und de Gasto es obligatoria
                    Ext.getCmp('cbUnidadGasto2').allowBlank = false;
                    Ext.getCmp('cbUnidadGasto2').setFieldLabel('Unidad de Gasto*');
                    Ext.getCmp('cbUnidadGasto2').focus(true);
                    Ext.getCmp('cbUnidadGasto2').focus(false);
                }
                else{
                    Ext.getCmp('cbUnidadGasto2').allowBlank = true;
                    Ext.getCmp('cbUnidadGasto2').setFieldLabel('Unidad de Gasto');
                    Ext.getCmp('cbUnidadGasto2').focus(true);
                    Ext.getCmp('cbUnidadGasto2').focus(false);
                }
                if(valor !== undefined){//Identifica si Valor es obligatoria
                    Ext.getCmp('txtValor').allowBlank = false;
                    Ext.getCmp('txtValor').setFieldLabel('Valor*');
                    Ext.getCmp('txtValor').focus(true);
                    Ext.getCmp('txtValor').focus(false);
                }
                else{
                    Ext.getCmp('txtValor').allowBlank = true;
                    Ext.getCmp('txtValor').setFieldLabel('Valor');
                    Ext.getCmp('txtValor').focus(true);
                    Ext.getCmp('txtValor').focus(false);

                }

                if(beneficiario !== undefined){//Identifica si Beneficiario es obligatoria
                    Ext.getCmp('txtBeneficiario1').allowBlank = false;
                    Ext.getCmp('txtBeneficiario1').setFieldLabel('Beneficiario*');
                    Ext.getCmp('txtCedula1').allowBlank = false;
                    Ext.getCmp('txtCedula1').setFieldLabel('Documento de Identidad*');
                    Ext.getCmp('txtBeneficiario1').focus(true);
                    Ext.getCmp('txtBeneficiario1').focus(false);
                    Ext.getCmp('txtCedula1').focus(true);
                    Ext.getCmp('txtCedula1').focus(false);

                }
                else{
                    Ext.getCmp('txtBeneficiario1').allowBlank = true;
                    Ext.getCmp('txtBeneficiario1').setFieldLabel('Beneficiario');
                    Ext.getCmp('txtCedula1').allowBlank = true;
                    Ext.getCmp('txtCedula1').setFieldLabel('Documento de Identidad');
                    Ext.getCmp('txtBeneficiario1').focus(true);
                    Ext.getCmp('txtBeneficiario1').focus(false);
                    Ext.getCmp('txtCedula1').focus(true);
                    Ext.getCmp('txtCedula1').focus(false);
                }

                //}
                Ext.getCmp('cbParametro2').focus(true);
                Ext.getCmp('cbParametro2').focus(false);
            },

            failure: function (response, options) {
                console.log('falla');
            }
        });

        Ext.Ajax.request({//Verifica si utiliza formulario externo
            method: 'post',
            url: '../servidor/tramites/formularioexterno/getFormularioExterno',
            params: {
                asunto: idAsunto
            },
            success: function (response, options) {
                var responseData = Ext.JSON.decode(response.responseText);
                if(responseData.success){
                    Ext.getCmp('txtFormExt').setHidden(false);
                    Ext.getCmp('txturlFormulario').setHidden(false);
                    var formext = responseData.data[0].FOR_DIRECCION;//Direccion url
                    var formnombre = responseData.data[0].FOR_NOMBRE;

                    Ext.getCmp('txtFormExt').setValue('Para este tipo de tramite debe descargar el Formulario, llenarlo y entregarlo en la DGF<br>'
                    +'junto con la solicitud de tr√°mite:');
                    var links = formext.split('^');
                    var nombres = formnombre.split('^');
                    var texto = '';
                    for(i=0;i<links.length;i++){
                        if(i===0)
                        texto = texto+'<a href="'+links[i]+'">'+nombres[i]+'</a>';
                        else
                        texto = texto+'<br>'+'<a href="'+links[i]+'">'+nombres[i]+'</a>';
                    }
                    Ext.getCmp('txturlFormulario').setHtml(texto);
                }
                else{
                    Ext.getCmp('txtFormExt').setHidden(true);
                    Ext.getCmp('txturlFormulario').setHidden(true);
                }
            },

            failure: function (response, options) {
                Ext.getCmp('txtFormExt').setHidden(true);
            }
        });
        Ext.getCmp('winNuevoTramite').scrollTo('top', 0);
    },

    onCancel: function(button, e, eOpts) {
        Ext.getCmp('winNuevoTramite').close();
    },

    onSave: function(button, e, eOpts) {
        var me = this;
        var forma = Ext.getCmp('frmTramite').getForm(),
            store = Ext.StoreManager.lookup('Registro');
        if (forma.isValid()) {
            var rec    = forma.getRecord();
            var values = forma.getValues();
            rec.set(values);
            store.add(rec);
            /*if(rec.phantom)
            store.add(rec);
            else if(rec.dirty)
            forma.updateRecord();*/

            store.sync(
            {
                params: {
                    idParametro: Ext.getCmp('cbParametroPrincipal').getValue()//Se envia el codigo del parametro
                },
                success: function(response, batch, options)
                {
                    forma.loadRecord(rec);
                    store.load();
                    Ext.getCmp('grdTramite').getStore().load();
                    Ext.Msg.alert('Datos Guardados','Los datos se han guardado exitosamente');
                    me.onCancel();
                },
                failure: function(batch, options)
                {
                    responseObj = Ext.decode(batch.exceptions[0].getResponse().responseText);
                    Ext.Msg.alert('Error', 'Hubo un error. '+responseObj.message);
                    me.onCancel();

                    //Cargar grid con tramites
                    var strTramiteReg = Ext.getStore('Registro');
                    strTramiteReg.removeAll();
                    Ext.getCmp('grdTramite').store.removeAll();
                    strTramiteReg.proxy.extraParams = {
                        busqueda: 4//Parametro para elegir el tipo de busqueda
                    };
                    strTramiteReg.load();
                }
            }
            );
        }

        else
        {
            Ext.Msg.alert('Atenci√≥n','Los datos son incorrectos o se encuentran incompletos');
            Ext.getCmp('txtFormExt').setDisabled(false);
        }
    },

    onWinNuevoTramiteAfterRender: function(component, eOpts) {
        //Formulario
        var forma = Ext.getCmp('frmTramite').getForm();

        if(component.curRec){ //Actualizar tramite
            forma.loadRecord(component.curRec);//Carga la forma con el registro

            Ext.getCmp('cbParametro2').setDisabled(true);
            if(Ext.getCmp('cbAsunto2').getValue() !== null)
            this.onCbAsunto2Select();
        }

        else//Nuevo tramite
        {
            var Una = Ext.getCmp('cbParametro2');
            Ext.getCmp('cbParametro2').setValue(ParamVal);
            var rec = Ext.create('model.registromodel');
            forma.reset();
            forma.loadRecord(rec);
            Ext.getCmp('txtTraCodigo').setValue(null);
            var strUnidad = Ext.getStore('Unidad');
            rec= strUnidad.getAt(0);
            Ext.getCmp('cbUnidadSolicitante2').setValue(rec.get(Ext.getCmp('cbUnidadSolicitante2').valueField));

            var ParamVal = Ext.getCmp('cbParametroPrincipal').getValue();
            Ext.getCmp('cbParametro2').setValue(ParamVal);
            Ext.getCmp('cbParametro2').disable(true);
        }
        Ext.getCmp('dtFecha').setValue(new Date());//Fecha tramite
    }

});
