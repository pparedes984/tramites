/*
 * File: app/view/administracion/UsuarioParametroViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tramites.view.administracion.UsuarioParametroViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.administracion.usuarioparametro',

    onCbUsuarioBuscar2Keyup: function(textfield, e, eOpts) {
        var txtUsuario = Ext.getCmp('cbUsuarioBuscar2').getValue();
        if(txtUsuario !== null && e.isSpecialKey() === false){//8 = Backspace
            var strUsuario = Ext.getCmp('cbUsuarioBuscar2').getStore();
            strUsuario.removeAll();
            Ext.Ajax.request({
                method: 'post',
                url: '../servidor/tramites/usuario/getUsuarioBusqueda',
                params: {
                    usuario: txtUsuario
                },
                success: function (response, options) {
                    strUsuario.load();
                    Ext.getCmp('cbUsuarioBuscar2').expand();
                }
            });
        }
    },

    onBtnLimpiarUsuario2Click: function(button, e, eOpts) {
        Ext.getCmp('grdUsuarioParam').getStore().removeAll();
        var strUsuario = Ext.getStore('Usuario');
        strUsuario.proxy.extraParams={
            usr: 0
        };
        strUsuario.load();
        Ext.getCmp('grdParametro').getStore().removeAll();
    },

    onGrdUsuarioParamRender: function(component, eOpts) {
        this.onBtnLimpiarUsuario2Click();
    },

    onGrdUsuarioParamItemClick: function(dataview, record, item, index, e, eOpts) {
        var g = Ext.getCmp('grdUsuarioParam');
        var rec = g.selection;
        var txtusuario = rec.data.USR_USUARIO;
        var strParametro = Ext.getCmp('grdParametro').getStore();
        strParametro.removeAll();
        strParametro.proxy.extraParams = {
            usuario: txtusuario
        };
        strParametro.load();
    },

    onBtnAgregarParamClick: function(button, e, eOpts) {
        var grid = Ext.getCmp('grdParametro');
        var store = grid.getStore();
        var g = Ext.getCmp('grdUsuarioParam');
        var arrayKeys = g.getSelectionModel().selected.items;
        var indice = g.getSelectionModel().selectionStartIdx;
        if(arrayKeys.length === 0){
            Ext.Msg.alert('Error', 'Debe escoger un usuario');
        }
        else
        {
            var rec = g.selection;
            var usuariot = rec.data.USR_USUARIO;
            store.insert(0,
            {
                USR_USUARIO: usuariot,
                PRM_ID: 0
            });
        }
    },

    onBtnQuitarParamClick: function(button, e, eOpts) {
        var g = Ext.getCmp('grdUsuarioParam');
        var arrayKeys = g.getSelectionModel().selected.items;
        var indice = g.getSelectionModel().selectionStartIdx;
        if(arrayKeys.length === 0)
        Ext.Msg.alert('Error', 'Debe escoger un usuario');
        else
        {
            var grid = Ext.getCmp('grdParametro');
            var arrayKeys = grid.getSelectionModel().selected.items;
            var indice = grid.getSelectionModel().selectionStartIdx;
            if(arrayKeys.length === 0)
            Ext.Msg.alert('Error', 'Debe escoger un par√°metro');
            else
            {
                var store = grid.getStore();
                var rec = grid.selection;
                var reco = g.selection;
                store.remove(rec);
                store.sync(
                {
                    params:{
                        usuario: reco.data.USR_USUARIO,
                        parametro: rec.data.PRM_ID
                    },
                    success: function(batch, success)
                    {
                        store.commitChanges();
                        store.load();
                    },

                    failure: function(batch, success)
                    {
                        Ext.Msg.alert('Error', 'Hubor un error');
                    }
                });
            }
        }
    },

    onCbParamExpand: function(field, eOpts) {
        var g = Ext.getCmp('grdUsuarioParam');
        var reco = g.selection;
        var strParam = Ext.getCmp('cbParam').getStore();
        strParam.proxy.extraParams = {
            usuario: reco.data.USR_USUARIO,
            param: 1
        };
        strParam.load();

    },

    onRowEditingEdit: function(editor, context, eOpts) {
        var me = this;
        if (context.record.modified)
        {
            var store = Ext.getCmp('grdParametro').getStore();
            var reco = context.record;
            store.add(reco);
            store.sync(
            {
                params:{
                    usuario: reco.data.USR_USUARIO
                },
                success: function(batch, success)
                {
                    store.commitChanges();
                    store.load();
                },

                failure: function(batch, success)
                {
                    Ext.Msg.alert('Error', 'Hubor un error');
                }
            });

        }
    },

    onGrdParametroCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        if(record.data.PRM_ID === 0)
        Ext.getCmp('cbParam').setDisabled(false);
        else
        Ext.getCmp('cbParam').setDisabled(true);
    }

});
