/*
 * File: app/view/administracion/UnidadParametroViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tramites.view.administracion.UnidadParametroViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.administracion.unidadparametro',

    onCbUnidad2Keyup: function(textfield, e, eOpts) {
        var unidad = Ext.getCmp('cbUnidad2').getValue();
        if(unidad !== null && e.isSpecialKey() === false){//8 = Backspace
            var strUnidad = Ext.getCmp('cbUnidad2').getStore();
            strUnidad.removeAll();
            Ext.Ajax.request({
                method: 'post',
                url: '../servidor/tramites/unidad/getUnidadBusqueda',
                params: {
                    txtunidad: unidad
                },
                success: function (response, options) {
                    strUnidad.load();
                    Ext.getCmp('cbUnidad2').expand();
                }
            });
        }
    },

    onBtnLimpiarUnidadesClick: function(button, e, eOpts) {
        Ext.getCmp('grdUnidadesParam').getStore().removeAll();
        var strUnidad = Ext.getStore('Unidad');
        strUnidad.proxy.extraParams = {
            todo: 1
        };
        strUnidad.load();
        Ext.getCmp('grdParam2').getStore().removeAll();
    },

    onGrdUnidades2Render: function(component, eOpts) {
        this.onBtnLimpiarUnidadesClick();
    },

    onGrdUnidades2ItemClick: function(dataview, record, item, index, e, eOpts) {
        var g = Ext.getCmp('grdUnidadesParam');
        var rec = g.selection;
        var txtunidad = rec.data.UND_CODIGO;
        var strParametro = Ext.getCmp('grdParam2').getStore();
        strParametro.removeAll();
        strParametro.proxy.extraParams = {
            unidad: txtunidad
        };
        strParametro.load();
    },

    onBtnAgregarParamUnidadClick: function(button, e, eOpts) {
        var g = Ext.getCmp('grdUnidadesParam');
        var arrayKeys = g.getSelectionModel().selected.items;
        var indice = g.getSelectionModel().selectionStartIdx;
        if(arrayKeys.length === 0){
            Ext.Msg.alert('Error', 'Debe escoger una Unidad');
        }
        else
        {

            var grid = Ext.getCmp('grdParam2');
            var store = grid.getStore();
            var rec = g.selection;
            var unidadt = rec.data.UND_CODIGO;
            store.insert(0,
            {
                UND_CODIGO: unidadt,
                PRM_ID: 0
            });
        }
    },

    onBtnQuitarParamUnidadClick: function(button, e, eOpts) {
        var g = Ext.getCmp('grdUnidadesParam');
        var arrayKeys = g.getSelectionModel().selected.items;
        var indice = g.getSelectionModel().selectionStartIdx;
        if(arrayKeys.length === 0)
        Ext.Msg.alert('Error', 'Debe escoger una unidad');
        else
        {
            var grid = Ext.getCmp('grdParam2');
            var arrayKeys = grid.getSelectionModel().selected.items;
            var indice = grid.getSelectionModel().selectionStartIdx;
            if(arrayKeys.length === 0)
            Ext.Msg.alert('Error', 'Debe escoger un parámetro');
            else
            {
                var store = grid.getStore();
                var rec = grid.selection;
                var reco = g.selection;
                if(rec.data.PRM_ID === Ext.getCmp('cbParametroPrincipal').getValue() || rec.data.PRM_ID === 0){
                    store.remove(rec);
                    store.sync(
                    {
                        params:{
                            unidad: reco.data.UND_CODIGO,
                            parametro: rec.data.PRM_ID
                        },
                        success: function(batch, success)
                        {
                            store.commitChanges();
                            store.load();
                        },

                        failure: function(batch, success)
                        {
                            Ext.Msg.alert('Error', 'Hubor un error');
                        }
                    });
                }
                else{
                    Ext.Msg.alert('Error', 'No puede eliminar el parámetro seleccionado. '
                    +'Debe tener asignado el parámetro para poder elminarlo');
                }
            }
        }
    },

    onCbParametro3Expand: function(field, eOpts) {
        var g = Ext.getCmp('grdUnidadesParam');
        var reco = g.selection;
        var strParam = Ext.getCmp('cbParametro3').getStore();
        strParam.proxy.extraParams = {
            unidad: reco.data.UND_CODIGO,
            und: 1
        };
        strParam.load();
    },

    onRowEditingEdit: function(editor, context, eOpts) {
        var me = this;
        if (context.record.modified)
        {
            var store = Ext.getCmp('grdParam2').getStore();
            var reco = context.record;
            if(reco.data.PRM_ID===Ext.getCmp('cbParametroPrincipal').getValue()){
                store.add(reco);
                store.sync(
                {
                    params:{
                        unidad: reco.data.UND_CODIGO
                    },
                    success: function(batch, success)
                    {
                        store.commitChanges();
                        store.load();
                    },

                    failure: function(batch, success)
                    {
                        Ext.Msg.alert('Error', 'Hubor un error');
                    }
                });
            }
            else
            Ext.Msg.alert('Error', 'No puede asignar el parámetro seleccionado. '
            +'Debe tener asignado el parámetro para poder asignarlo.');
        }
        me.onGrdUnidades2ItemClick();
    },

    onGrdParam2CellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        if(record.data.PRM_ID === 0)
        Ext.getCmp('cbParametro3').setDisabled(false);
        else
        Ext.getCmp('cbParametro3').setDisabled(true);
    }

});
