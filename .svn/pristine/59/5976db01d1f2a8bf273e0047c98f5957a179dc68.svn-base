/*
 * File: app/view/direccionar/DirecGeneralViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Tramites.view.direccionar.DirecGeneralViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.direccionar.direcgeneral',

    onButtonClick1: function(button, e, eOpts) {
        STRTRAMITEDETA.load();
    },

    onRecibidoCheckBeforeCheckChange: function(checkcolumn, rowIndex, checked, record, e, eOpts) {
        if(record.data.TRA_RECIBIDO !== true){
            if(record.data.TRA_FECHARECIBIDO===''){
                Ext.Msg.show({
                    title: 'Aviso',
                    msg: 'Va a recepcionar el trámite y después ya no puede modificarlo. ¿Está seguro?',
                    icon: Ext.Msg.QUESTION,
                    buttonText: {
                        yes: 'Aceptar',
                        no: 'Cancelar'
                    },
                    buttons: Ext.Msg.YESNO,
                    fn: function (btn) {
                        if (btn == 'yes') {
                            //Nuevafecha
                            var fecha = Ext.Date.format(new Date(), "Y-m-d");

                            var store = Ext.getCmp('grdTramite2').getStore();
                            store.add(record);
                            store.sync(
                            {
                                params: {
                                    idParametro: record.data.TRA_PRM_ID,//Se envia el codigo del parametro
                                    fechaRecibido: fecha
                                },
                                success: function(batch, success)
                                {
                                    store.commitChanges();
                                    store.load();

                                },

                                failure: function(batch, success)
                                {
                                    Ext.Msg.alert('Error', 'Hubor un error');
                                }
                            });

                        }
                        else{
                            var strTramiteDet = Ext.getStore('Registro');
                            strTramiteDet.proxy.extraParams = {
                                busqueda: 2,
                                parametro: PARAMETROPRINCIPAL
                            };
                            strTramiteDet.load();
                            Ext.getCmp('pnlDestinosDireccionar').setVisible(false);
                        }
                    }
                });

            }
            Ext.getCmp('pnlDestinosDireccionar').setVisible(true);
        }
        else{
            Ext.Msg.alert('Aviso', 'Este trámite ya fue recibido.');
            this.onButtonClick1();

        }
    },

    onGrdTramite2CellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        if (record)
        {
            var winTramiteD = Ext.create('Tramites.view.direccionar.winTramiteDetalle');
            winTramiteD.curRec = record;
            winTramiteD.store = Ext.getStore('Registro');
            Ext.getStore('Registro').load();
            winTramiteD.show();
        }
        else
        {
            Ext.Msg.alert('Error', 'Seleccione un registro para editar');
        }
    },

    onGrdTramite2ItemClick: function(dataview, record, item, index, e, eOpts) {
        var me = this;
        var grid = Ext.getCmp('grdTramite2');
        var arrayKeys = grid.getSelectionModel().selected.items;

        if(record.data.TRA_RECIBIDO === true)
        {
            //-hace visible el panel de destinos si el campo seleccionado esta recibido
            Ext.getCmp('pnlDestinosDireccionar').setVisible(true);
            //-------
            //-verifica si el usuario es un jefe de la unidad seleccionada para mostrar el boton de anular.

            Ext.Ajax.request
            (
            {
                method: 'post',
                url: '../servidor/tramites/EstadoTramite/verificaJefe',
                params:{
                    usuario: USUARIO,
                    unidad: UNIDADDIR
                },
                success: function (response, options) {
                    var responseData = Ext.JSON.decode(response.responseText);
                    if (!responseData.success) {
                        Ext.getCmp('btnAnularDestino').setVisible(false);
                        Ext.getCmp('txtAsignadoA').setHidden(true);
                        Ext.getCmp('txtAsignadoADestino').setDisabled(true);
                    }
                    else{
                        Ext.getCmp('btnAnularDestino').setVisible(true);
                        Ext.getCmp('txtAsignadoA').setHidden(false);
                        Ext.getCmp('txtAsignadoADestino').setDisabled(false);
                    }
                },
                failure: function (response, options){
                    Ext.Msg.show//Mensaje de Error
                    (
                    {
                        title: 'Error',
                        msg: responseData.message,
                        icon: Ext.Msg.ERROR,
                        buttons: Ext.Msg.OK
                    }
                    );

                    Ext.getCmp('btnAnularDestino').setVisible(false);
                    Ext.getCmp('txtAsignadoA').setHidden(true);
                    Ext.getCmp('txtAsignadoADestino').setDisabled(true);
                }
            }
            );
            //------
            //-carga el combo de destinos
            var strDestinos = Ext.getCmp('cbDestinosGrid').getStore();
            var parametro = record.data.TRA_PRM_ID;
            strDestinos.proxy.extraParams = {
                destino: 0,
                idparametro: parametro,
                idtramite: record.data.TRA_CODIGO
            };
            strDestinos.load();
            //------
            //-crud de estados
            Ext.getCmp('grdDirecTramite').getStore().removeAll();
            var strEstado = Ext.getCmp('grdDirecTramite').getStore();
            var tramite = record.data.TRA_CODIGO;

            var fechainicio = record.data.TRA_FECHARECIBIDO;
            var busc;
            if(UNIDADDIR !== '183')
            busc = 2;
            else
            busc = 1;
            strEstado.proxy.extraParams = {
                idparametro: parametro,
                idtramite: tramite,
                fechaInicio: fechainicio,
                busqueda: busc,
                unidad: UNIDADDIR
            };
            strEstado.load();
            //------
        }
        else
        Ext.getCmp('pnlDestinosDireccionar').setVisible(false);


    },

    onBtnAgregarDestinoClick: function(button, e, eOpts) {
        var grid = Ext.getCmp('grdDirecTramite');
        var store = grid.getStore();
        var g = Ext.getCmp('grdTramite2');
        var rec = g.selection;
        var tramiteNum = rec.data.TRA_CODIGO;
        var parametroNum = rec.data.TRA_PRM_ID;
        var fechainicio = rec.data.TRA_FECHARECIBIDO;
        store.insert(0,
        {
            EST_CODIGO: 0,
            TRA_PRM_ID:parametroNum,
            EST_FECHARECIBIDO:new Date(),
            EST_FECHAINICIO: fechainicio,
            TRA_CODIGO:tramiteNum,
            UND_CODIGO:0
        });
    },

    onBtnAnularDestinoClick: function(button, e, eOpts) {
        var grid = Ext.getCmp('grdDirecTramite');
        var arrayKeys = grid.getSelectionModel().selected.items;
        var indice = grid.getSelectionModel().selectionStartIdx;
        var me =this;
        if(arrayKeys.length === 0)
        Ext.Msg.alert('Error', 'Debe escoger un registro');
        else
        {
            Ext.Msg.show({
                title: 'Atención',
                msg: 'Está seguro de borrar esta fila y los registros asociados?',
                icon: Ext.Msg.QUESTION,
                buttonText: {
                    yes: 'Si',
                    no: 'No'
                },
                buttons: Ext.Msg.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.Ajax.request
                        (
                        {
                            method: 'post',
                            url: '../servidor/tramites/EstadoTramite/delete',
                            params: {
                                idEstado: arrayKeys[0].data.EST_CODIGO
                            },
                            success: function (response, options) {
                                var responseData = Ext.JSON.decode(response.responseText);
                                if (!responseData.success) {
                                    Ext.Msg.show//Mensaje de Error
                                    (
                                    {
                                        title: 'Error',
                                        msg: responseData.message,
                                        icon: Ext.Msg.ERROR,
                                        buttons: Ext.Msg.OK
                                    }
                                    );
                                    me.onBtnDirecRefreshClick();
                                }
                                else {
                                    grid.getStore().removeAt(indice);

                                    me.onBtnDirecRefreshClick();
                                    Ext.Msg.alert('Correcto', 'Destino anulado');
                                }
                            },
                            failure: function (response, options){
                                Ext.Msg.show//Mensaje de Error
                                (
                                {
                                    title: 'Error',
                                    msg: responseData.message,
                                    icon: Ext.Msg.ERROR,
                                    buttons: Ext.Msg.OK
                                }
                                );
                                this.onBtnDirecRefreshClick();
                            }
                        }
                        );
                    }
                }
            });
        }
    },

    onBtnDirecRefreshClick: function(button, e, eOpts) {
        var grid = Ext.getCmp('grdDirecTramite');
        var store = grid.getStore();
        store.removeAll();
        var g = Ext.getCmp('grdTramite2');
        var rec = g.selection;
        var parametro = rec.data.TRA_PRM_ID;
        var tramite = rec.data.TRA_CODIGO;
        var fechainicio = rec.data.TRA_FECHARECIBIDO;
        var busc;
        if(UNIDADDIR !== '183')
        busc = 2;
        else
        busc = 1;
        var strEstado = store;
        strEstado.proxy.extraParams = {
            idparametro: parametro,
            idtramite: tramite,
            fechaInicio: fechainicio,
            busqueda: busc,
            unidad: UNIDADDIR
        };
        strEstado.load();

    },

    onBtnVerDestinosClick: function(button, e, eOpts) {
        var winEstado = Ext.create('Tramites.view.direccionar.winEstado');
        winEstado.show();
        var grid = Ext.getCmp('grdDirecTramite').setVisible(false);
    },

    onCbDestinosGridExpand: function(field, eOpts) {
        var strDestinos = Ext.getCmp('cbDestinosGrid').getStore();
        var grid = Ext.getCmp('grdTramite2');
        var record = grid.selection;
        var parametro = record.data.TRA_PRM_ID;
        strDestinos.proxy.extraParams = {
            destino: 1,
            idparametro: parametro,
            idtramite: record.data.TRA_CODIGO
        };
        strDestinos.load();
    },

    onCbEstadoSelect: function(combo, record, eOpts) {
        if(record.data.TIP_CODIGO === 3){
            Ext.getCmp('chbRevisadoUnidad').setValue(true);
            Ext.getCmp('chbRevisadoUnidad').setDisabled(true);
        }
        else{
            Ext.getCmp('chbRevisadoUnidad').setDisabled(false);
        }
    },

    onRowEditingEdit1: function(editor, context, eOpts) {
        var me = this;
        if (context.record.modified)
        {
            var store = Ext.getCmp('grdDirecTramite').getStore();
            var rec = Ext.create('model.estadomodel');
            //rec.set(context.record.data);
            var reco = context.record;

            if(reco.data.TIP_CODIGO === 3){
                Ext.Msg.show({
                    title: 'Atención',
                    msg: 'Una vez finalizado puede agregar un destino más, desea agregarlo?',
                    icon: Ext.Msg.QUESTION,
                    buttonText: {
                        yes: 'Si',
                        no: 'No'
                    },
                    buttons: Ext.Msg.YESNO,
                    fn: function (btn) {
                        if (btn == 'yes') {
                            var grid = Ext.getCmp('grdDirecTramite');
                            var store = grid.getStore();
                            var g = Ext.getCmp('grdTramite2');
                            var rec = g.selection;
                            var tramiteNum = rec.data.TRA_CODIGO;
                            var parametroNum = rec.data.TRA_PRM_ID;
                            var fechainicio = rec.data.TRA_FECHARECIBIDO;
                            store.insert(0,
                            {
                                EST_CODIGO: 0,
                                TRA_PRM_ID:parametroNum,
                                EST_FECHARECIBIDO:new Date(),
                                EST_FECHAINICIO: fechainicio,
                                TRA_CODIGO:tramiteNum,
                                UND_CODIGO: 0
                            });

                            Ext.getCmp('txtDestino').setHidden(false);
                        }
                        else{

                        }
                    }
                });
            }
            store.add(reco);


            store.sync(
            {
                params:{
                    tipoEstado: reco.data.TIP_CODIGO
                },
                success: function(batch, success)
                {
                    store.commitChanges();
                    store.load();
                    //me.onCancel();
                    Ext.getCmp('grdDirecTramite').getStore().load();
                },

                failure: function(batch, success)
                {
                    Ext.Msg.alert('Error', 'Hubor un error');
                }
            });

        }
    },

    onRowEditingCanceledit: function(editor, context, eOpts) {
        this.onBtnDirecRefreshClick();
    },

    onGrdDirecTramiteCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
        //desabilita el destino si es uno nuevo o una actualizacion de un registro
        if(record.data.UND_CODIGO === 0)
        Ext.getCmp('cbDestinosGrid').setDisabled(false);
        else
        Ext.getCmp('cbDestinosGrid').setDisabled(true);
        //
        if(record.data.TIP_CODIGO !== 3){
            Ext.getCmp('txtObservacionDestino').setDisabled(false);
        }
        else{
            Ext.getCmp('txtObservacionDestino').setDisabled(true);
        }

    }

});
